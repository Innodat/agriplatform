--
-- For use with https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone
--

-- Custom types
create type identity.app_permission as enum ('channels.delete', 'messages.delete');
create type identity.app_role as enum ('admin', 'moderator');

-- USERS
create table identity.users (
  id          uuid references auth.users not null primary key, -- UUID from auth.users
  username    text,
  is_active BOOLEAN DEFAULT TRUE,
  created_by VARCHAR,
  created_at timestamptz DEFAULT now(),
  updated_by VARCHAR,
  updated_at timestamptz DEFAULT now()
);
comment on table identity.users is 'Profile data for each user.';
comment on column identity.users.id is 'References the internal Supabase Auth user.';

-- USER ROLES
create table identity.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references identity.users on delete cascade not null,
  role      app_role not null,
  unique (user_id, role),
  is_active BOOLEAN DEFAULT TRUE,
  created_by VARCHAR,
  created_at timestamptz DEFAULT now(),
  updated_by VARCHAR,
  updated_at timestamptz DEFAULT now()
);
comment on table identity.user_roles is 'Application roles for each user.';

-- ROLE PERMISSIONS
create table identity.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission),
  is_active BOOLEAN DEFAULT TRUE,
  created_by VARCHAR,
  created_at timestamptz DEFAULT now(),
  updated_by VARCHAR,
  updated_at timestamptz DEFAULT now()
);
comment on table identity.role_permissions is 'Application permissions for each role.';

-- authorize with role-based access control (RBAC)
create function identity.authorize(
  requested_permission app_permission
)
returns boolean as $$
declare
  bind_permissions int;
begin
  select count(*)
  from identity.role_permissions
  where role_permissions.permission = authorize.requested_permission
    and role_permissions.role = (auth.jwt() ->> 'user_role')::identity.app_role
  into bind_permissions;
  
  return bind_permissions > 0;
end;
$$ language plpgsql security definer set search_path = identity, finance;

-- add permissions
-- Finance permissions
insert into identity.role_permissions (role, permission)
values
  -- finance.purchase
  ('financialadmin', 'finance.purchase.admin'),
  ('financialadmin', 'finance.purchase.read'),
  ('financialadmin', 'finance.purchase.write'),
  ('financialadmin', 'finance.purchase.update'),
  ('employee',       'finance.purchase.read'),
  ('employee', 'finance.purchase.read'),
  ('employee', 'finance.purchase.write'),
  ('employee', 'finance.purchase.update'),

  -- finance.receipt
  ('financialadmin', 'finance.receipt.admin'),
  ('financialadmin', 'finance.receipt.read'),
  ('financialadmin', 'finance.receipt.write'),
  ('financialadmin', 'finance.receipt.update'),
  ('employee',       'finance.receipt.read'),
  ('employee',       'finance.receipt.write'),
  ('employee',       'finance.receipt.update'),

  -- finance.expense_category
  ('financialadmin', 'finance.expense_category.admin'),
  ('financialadmin', 'finance.expense_category.read'),
  ('financialadmin', 'finance.expense_category.write'),
  ('financialadmin', 'finance.expense_category.update'),
  ('employee',       'finance.expense_category.read'),

  -- finance.expense_type
  ('financialadmin', 'finance.expense_type.admin'),
  ('financialadmin', 'finance.expense_type.read'),
  ('financialadmin', 'finance.expense_type.write'),
  ('financialadmin', 'finance.expense_type.update'),
  ('employee',       'finance.expense_type.read'),

  -- finance.currency
  ('financialadmin', 'finance.currency.admin'),
  ('financialadmin', 'finance.currency.read'),
  ('financialadmin', 'finance.currency.write'),
  ('financialadmin', 'finance.currency.update'),
  ('employee',       'finance.currency.read');

-- Admin role permissions
insert into identity.role_permissions (role, permission)
values
  ('admin', 'identity.users.admin'),
  ('admin', 'identity.users.read'),
  ('admin', 'identity.users.write'),
  ('admin', 'identity.users.update'),
  ('admin', 'identity.user_roles.admin'),
  ('admin', 'identity.user_roles.read'),
  ('admin', 'identity.user_roles.write'),
  ('admin', 'identity.user_roles.update'),
  ('admin', 'identity.role_permissions.admin'),
  ('admin', 'identity.role_permissions.read'),
  ('admin', 'identity.role_permissions.write'),
  ('admin', 'identity.role_permissions.update');

-- Secure the tables
alter table identity.users enable row level security;
alter table identity.user_roles enable row level security;
alter table identity.role_permissions enable row level security;
create policy "Allow read access" on identity.users for select using ( auth.uid() = id or authorize('identity.users.admin') );
create policy "Allow insert access" on identity.users for insert with check ( auth.uid() = id or authorize('identity.users.admin') );
create policy "Allow update access" on identity.users for update using ( auth.uid() = id or authorize('identity.users.admin') );

create policy "Allow individual read access" on identity.user_roles for select using ( authorize('finance.user_roles.read') );
create policy "Allow individual insert access" on identity.user_roles for insert with check ( authorize('finance.user_roles.insert') );
create policy "Allow individual update access" on identity.user_roles for update using ( authorize('finance.user_roles.update') );

create policy "Allow individual read access" on finance.purchase for select using ( auth.uid() = created_user_id and authorize('finance.purchase.read') );
create policy "Allow admin read access" on finance.purchase for select using ( authorize('finance.purchase.admin') );
create policy "Allow individual insert access" on finance.purchase for insert with check ( auth.uid() = created_user_id and authorize('finance.purchase.insert') );
create policy "Allow individual insert access" on finance.purchase for insert with check ( authorize('finance.purchase.admin') );
create policy "Allow individual update access" on finance.purchase for update using ( auth.uid() = created_user_id and authorize('finance.purchase.update') );
create policy "Allow authorized delete access" on finance.purchase for update using ( authorize('finance.purchase.admin') );

create policy "Allow individual read access" on finance.receipt for select using ( auth.uid() = created_user_id and authorize('finance.receipt.read') );
create policy "Allow admin read access" on finance.receipt for select using ( authorize('finance.receipt.admin') );
create policy "Allow individual insert access" on finance.receipt for insert with check ( auth.uid() = created_user_id and authorize('finance.receipt.insert') );
create policy "Allow individual insert access" on finance.receipt for insert with check ( authorize('finance.receipt.admin') );
create policy "Allow individual update access" on finance.receipt for update using ( auth.uid() = created_user_id and authorize('finance.receipt.update') );
create policy "Allow authorized delete access" on finance.receipt for update using ( authorize('finance.receipt.admin') );

create policy "Allow individual read access" on finance.expense_category for select using ( auth.uid() = created_user_id and authorize('finance.expense_category.read') );
create policy "Allow admin read access" on finance.expense_category for select using ( authorize('finance.expense_category.admin') );
create policy "Allow individual insert access" on finance.expense_category for insert with check ( auth.uid() = created_user_id and authorize('finance.expense_category.insert') );
create policy "Allow individual insert access" on finance.expense_category for insert with check ( authorize('finance.expense_category.admin') );
create policy "Allow individual update access" on finance.expense_category for update using ( auth.uid() = created_user_id and authorize('finance.expense_category.update') );
create policy "Allow authorized delete access" on finance.expense_category for update using ( authorize('finance.expense_category.admin') );

create policy "Allow individual read access" on finance.expense_type for select using ( auth.uid() = created_user_id and authorize('finance.expense_type.read') );
create policy "Allow admin read access" on finance.expense_type for select using ( authorize('finance.expense_type.admin') );
create policy "Allow individual insert access" on finance.expense_type for insert with check ( auth.uid() = created_user_id and authorize('finance.expense_type.insert') );
create policy "Allow individual insert access" on finance.expense_type for insert with check ( authorize('finance.expense_type.admin') );
create policy "Allow individual update access" on finance.expense_type for update using ( auth.uid() = created_user_id and authorize('finance.expense_type.update') );
create policy "Allow authorized delete access" on finance.expense_type for update using ( authorize('finance.expense_type.admin') );

create policy "Allow individual read access" on finance.currency for select using ( auth.uid() = created_user_id and authorize('finance.currency.read') );
create policy "Allow admin read access" on finance.currency for select using ( authorize('finance.currency.admin') );
create policy "Allow individual insert access" on finance.currency for insert with check ( auth.uid() = created_user_id and authorize('finance.currency.insert') );
create policy "Allow individual insert access" on finance.currency for insert with check ( authorize('finance.currency.admin') );
create policy "Allow individual update access" on finance.currency for update using ( auth.uid() = created_user_id and authorize('finance.currency.update') );
create policy "Allow authorized delete access" on finance.currency for update using ( authorize('finance.currency.admin') );

create policy "Allow individual read access" on identity.user_roles for select using ( auth.uid() = id or authorize('finance.user_roles.read') );
create policy "Allow individual insert access" on identity.user_roles for insert with check ( authorize('finance.user_roles.insert') );
create policy "Allow individual update access" on identity.user_roles for update using ( authorize('finance.user_roles.update') );

-- inserts a row into identity.users and assigns roles
create function identity.handle_new_user() 
returns trigger as $$
declare is_admin boolean;
begin
  insert into identity.users (id, username)
  values (new.id, new.email);
  
  select count(*) = 1 from auth.users into is_admin;
  
  return new;
end;
$$ language plpgsql security definer set search_path = auth, identity;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure identity.handle_new_user();


/**
 * HELPER FUNCTIONS
 * Create test user helper method.
 */
create or replace function identity.create_user(
    email text
) returns uuid
    security definer
    set search_path = auth
as $$
  declare
  user_id uuid;
begin
  user_id := extensions.uuid_generate_v4();
  
  insert into auth.users (id, email)
    values (user_id, email)
    returning id into user_id;

    return user_id;
end;
$$ language plpgsql;